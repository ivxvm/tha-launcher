import { Level, GameStats } from "types.slint";
import { Globals } from "globals.slint";

component LevelText inherits Text {
    font-size: 24px;
    color: #8caba1;
}

component PlayButton inherits HorizontalLayout {
    in property <string> text;
    in property <Level> level;
    callback request_play_level(string);
    text := Text {
        text: root.text + " >";
        color: #d1b187;
        font-size: 32px;
        touch_area := TouchArea {
            mouse-cursor: pointer;
            clicked => {
                root.request_play_level(root.level.file);
            }
        }
    }

    states [
        has-hover when touch_area.has-hover: {
            text.color: #c77b58;
        }
    ]
}

export component PlayTab {
    callback request_play_level(string);
    in property <[GameStats]> game_stats;
    in property <[Level]> levels: [
        {
            id: 0,
            name: "Interdimensional Drift",
            file: "Level1.blend",
            gravity: 18,
            image: @image-url("../images/level1_screen4e.png")
        },
        {
            id: 1,
            name: "Jumper's High",
            file: "Level2.blend",
            gravity: 18,
            image: @image-url("../images/level2_screen6f.png")
        },
        {
            id: 2,
            name: "To The Gateway",
            file: "Level3.blend",
            gravity: 14,
            image: @image-url("../images/level3_screen4l.png")
        }
    ];
    VerticalLayout {
        spacing: 16px;
        for level in root.levels: HorizontalLayout {
            Image {
                source: level.image;
            }

            VerticalLayout {
                width: 40%;
                alignment: space-between;
                VerticalLayout {
                    alignment: start;
                    LevelText {
                        text: level.name;
                        font-weight: 700;
                        color: #4b726e;
                    }

                    LevelText {
                        text: "Gravity: " + level.gravity;
                    }

                    LevelText {
                        text: "Best time: " + (root.game_stats[level.id].time == 0 ? "?" : root.game_stats[level.id].time + "s");
                    }

                    LevelText {
                        text: "Best gems: " + (root.game_stats[level.id].gems == 0 ? "?" : root.game_stats[level.id].gems + "/" + root.game_stats[level.id].total_gems);
                    }

                    LevelText {
                        text: "Pictures collected: " + (root.game_stats[level.id].drawings == 0 ? "?" : root.game_stats[level.id].drawings + "/" + root.game_stats[level.id].total_drawings);
                    }
                }

                HorizontalLayout {
                    alignment: space-between;
                    padding-right: 32px;
                    padding-bottom: 16px;
                    Text { }

                    PlayButton {
                        text: "Start";
                        level: level;
                        request_play_level(path) => {
                            root.request_play_level(path)
                        }
                    }
                }
            }
        }
    }
}
